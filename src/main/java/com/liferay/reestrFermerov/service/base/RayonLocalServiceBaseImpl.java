package com.liferay.reestrFermerov.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.reestrFermerov.model.Rayon;
import com.liferay.reestrFermerov.service.RayonLocalService;
import com.liferay.reestrFermerov.service.persistence.FermerPersistence;
import com.liferay.reestrFermerov.service.persistence.RayonPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the rayon local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.reestrFermerov.service.impl.RayonLocalServiceImpl}.
 * </p>
 *
 * @author liza
 * @see com.liferay.reestrFermerov.service.impl.RayonLocalServiceImpl
 * @see com.liferay.reestrFermerov.service.RayonLocalServiceUtil
 * @generated
 */
public abstract class RayonLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements RayonLocalService, IdentifiableBean {
    @BeanReference(type = com.liferay.reestrFermerov.service.FermerLocalService.class)
    protected com.liferay.reestrFermerov.service.FermerLocalService fermerLocalService;
    @BeanReference(type = com.liferay.reestrFermerov.service.FermerService.class)
    protected com.liferay.reestrFermerov.service.FermerService fermerService;
    @BeanReference(type = FermerPersistence.class)
    protected FermerPersistence fermerPersistence;
    @BeanReference(type = com.liferay.reestrFermerov.service.RayonLocalService.class)
    protected com.liferay.reestrFermerov.service.RayonLocalService rayonLocalService;
    @BeanReference(type = com.liferay.reestrFermerov.service.RayonService.class)
    protected com.liferay.reestrFermerov.service.RayonService rayonService;
    @BeanReference(type = RayonPersistence.class)
    protected RayonPersistence rayonPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private RayonLocalServiceClpInvoker _clpInvoker = new RayonLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.liferay.reestrFermerov.service.RayonLocalServiceUtil} to access the rayon local service.
     */

    /**
     * Adds the rayon to the database. Also notifies the appropriate model listeners.
     *
     * @param rayon the rayon
     * @return the rayon that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Rayon addRayon(Rayon rayon) throws SystemException {
        rayon.setNew(true);

        return rayonPersistence.update(rayon);
    }

    /**
     * Creates a new rayon with the primary key. Does not add the rayon to the database.
     *
     * @param rayonId the primary key for the new rayon
     * @return the new rayon
     */
    @Override
    public Rayon createRayon(long rayonId) {
        return rayonPersistence.create(rayonId);
    }

    /**
     * Deletes the rayon with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param rayonId the primary key of the rayon
     * @return the rayon that was removed
     * @throws PortalException if a rayon with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Rayon deleteRayon(long rayonId)
        throws PortalException, SystemException {
        return rayonPersistence.remove(rayonId);
    }

    /**
     * Deletes the rayon from the database. Also notifies the appropriate model listeners.
     *
     * @param rayon the rayon
     * @return the rayon that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Rayon deleteRayon(Rayon rayon) throws SystemException {
        return rayonPersistence.remove(rayon);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Rayon.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return rayonPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.reestrFermerov.model.impl.RayonModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return rayonPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.reestrFermerov.model.impl.RayonModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return rayonPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return rayonPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return rayonPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Rayon fetchRayon(long rayonId) throws SystemException {
        return rayonPersistence.fetchByPrimaryKey(rayonId);
    }

    /**
     * Returns the rayon with the primary key.
     *
     * @param rayonId the primary key of the rayon
     * @return the rayon
     * @throws PortalException if a rayon with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Rayon getRayon(long rayonId) throws PortalException, SystemException {
        return rayonPersistence.findByPrimaryKey(rayonId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return rayonPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the rayons.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.reestrFermerov.model.impl.RayonModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of rayons
     * @param end the upper bound of the range of rayons (not inclusive)
     * @return the range of rayons
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Rayon> getRayons(int start, int end) throws SystemException {
        return rayonPersistence.findAll(start, end);
    }

    /**
     * Returns the number of rayons.
     *
     * @return the number of rayons
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getRayonsCount() throws SystemException {
        return rayonPersistence.countAll();
    }

    /**
     * Updates the rayon in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param rayon the rayon
     * @return the rayon that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Rayon updateRayon(Rayon rayon) throws SystemException {
        return rayonPersistence.update(rayon);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFermerRayon(long fermerId, long rayonId)
        throws SystemException {
        fermerPersistence.addRayon(fermerId, rayonId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFermerRayon(long fermerId, Rayon rayon)
        throws SystemException {
        fermerPersistence.addRayon(fermerId, rayon);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFermerRayons(long fermerId, long[] rayonIds)
        throws SystemException {
        fermerPersistence.addRayons(fermerId, rayonIds);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void addFermerRayons(long fermerId, List<Rayon> Rayons)
        throws SystemException {
        fermerPersistence.addRayons(fermerId, Rayons);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void clearFermerRayons(long fermerId) throws SystemException {
        fermerPersistence.clearRayons(fermerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFermerRayon(long fermerId, long rayonId)
        throws SystemException {
        fermerPersistence.removeRayon(fermerId, rayonId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFermerRayon(long fermerId, Rayon rayon)
        throws SystemException {
        fermerPersistence.removeRayon(fermerId, rayon);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFermerRayons(long fermerId, long[] rayonIds)
        throws SystemException {
        fermerPersistence.removeRayons(fermerId, rayonIds);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void deleteFermerRayons(long fermerId, List<Rayon> Rayons)
        throws SystemException {
        fermerPersistence.removeRayons(fermerId, Rayons);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Rayon> getFermerRayons(long fermerId) throws SystemException {
        return fermerPersistence.getRayons(fermerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Rayon> getFermerRayons(long fermerId, int start, int end)
        throws SystemException {
        return fermerPersistence.getRayons(fermerId, start, end);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Rayon> getFermerRayons(long fermerId, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return fermerPersistence.getRayons(fermerId, start, end,
            orderByComparator);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFermerRayonsCount(long fermerId) throws SystemException {
        return fermerPersistence.getRayonsSize(fermerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public boolean hasFermerRayon(long fermerId, long rayonId)
        throws SystemException {
        return fermerPersistence.containsRayon(fermerId, rayonId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public boolean hasFermerRayons(long fermerId) throws SystemException {
        return fermerPersistence.containsRayons(fermerId);
    }

    /**
     * @throws SystemException if a system exception occurred
     */
    @Override
    public void setFermerRayons(long fermerId, long[] rayonIds)
        throws SystemException {
        fermerPersistence.setRayons(fermerId, rayonIds);
    }

    /**
     * Returns the fermer local service.
     *
     * @return the fermer local service
     */
    public com.liferay.reestrFermerov.service.FermerLocalService getFermerLocalService() {
        return fermerLocalService;
    }

    /**
     * Sets the fermer local service.
     *
     * @param fermerLocalService the fermer local service
     */
    public void setFermerLocalService(
        com.liferay.reestrFermerov.service.FermerLocalService fermerLocalService) {
        this.fermerLocalService = fermerLocalService;
    }

    /**
     * Returns the fermer remote service.
     *
     * @return the fermer remote service
     */
    public com.liferay.reestrFermerov.service.FermerService getFermerService() {
        return fermerService;
    }

    /**
     * Sets the fermer remote service.
     *
     * @param fermerService the fermer remote service
     */
    public void setFermerService(
        com.liferay.reestrFermerov.service.FermerService fermerService) {
        this.fermerService = fermerService;
    }

    /**
     * Returns the fermer persistence.
     *
     * @return the fermer persistence
     */
    public FermerPersistence getFermerPersistence() {
        return fermerPersistence;
    }

    /**
     * Sets the fermer persistence.
     *
     * @param fermerPersistence the fermer persistence
     */
    public void setFermerPersistence(FermerPersistence fermerPersistence) {
        this.fermerPersistence = fermerPersistence;
    }

    /**
     * Returns the rayon local service.
     *
     * @return the rayon local service
     */
    public com.liferay.reestrFermerov.service.RayonLocalService getRayonLocalService() {
        return rayonLocalService;
    }

    /**
     * Sets the rayon local service.
     *
     * @param rayonLocalService the rayon local service
     */
    public void setRayonLocalService(
        com.liferay.reestrFermerov.service.RayonLocalService rayonLocalService) {
        this.rayonLocalService = rayonLocalService;
    }

    /**
     * Returns the rayon remote service.
     *
     * @return the rayon remote service
     */
    public com.liferay.reestrFermerov.service.RayonService getRayonService() {
        return rayonService;
    }

    /**
     * Sets the rayon remote service.
     *
     * @param rayonService the rayon remote service
     */
    public void setRayonService(
        com.liferay.reestrFermerov.service.RayonService rayonService) {
        this.rayonService = rayonService;
    }

    /**
     * Returns the rayon persistence.
     *
     * @return the rayon persistence
     */
    public RayonPersistence getRayonPersistence() {
        return rayonPersistence;
    }

    /**
     * Sets the rayon persistence.
     *
     * @param rayonPersistence the rayon persistence
     */
    public void setRayonPersistence(RayonPersistence rayonPersistence) {
        this.rayonPersistence = rayonPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.liferay.reestrFermerov.model.Rayon",
            rayonLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.liferay.reestrFermerov.model.Rayon");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Rayon.class;
    }

    protected String getModelClassName() {
        return Rayon.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = rayonPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
