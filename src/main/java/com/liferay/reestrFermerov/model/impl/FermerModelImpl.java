package com.liferay.reestrFermerov.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.reestrFermerov.model.Fermer;
import com.liferay.reestrFermerov.model.FermerModel;
import com.liferay.reestrFermerov.model.FermerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Fermer service. Represents a row in the &quot;RR_Fermer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.reestrFermerov.model.FermerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FermerImpl}.
 * </p>
 *
 * @author liza
 * @see FermerImpl
 * @see com.liferay.reestrFermerov.model.Fermer
 * @see com.liferay.reestrFermerov.model.FermerModel
 * @generated
 */
@JSON(strict = true)
public class FermerModelImpl extends BaseModelImpl<Fermer>
    implements FermerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a fermer model instance should use the {@link com.liferay.reestrFermerov.model.Fermer} interface instead.
     */
    public static final String TABLE_NAME = "RR_Fermer";
    public static final Object[][] TABLE_COLUMNS = {
            { "fermerId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "pravoForma", Types.VARCHAR },
            { "inn", Types.VARCHAR },
            { "kpp", Types.VARCHAR },
            { "ogrn", Types.VARCHAR },
            { "rayonRegistration", Types.VARCHAR },
            { "rayonPosevPole", Types.VARCHAR },
            { "dateRegistration", Types.TIMESTAMP },
            { "archiveStatus", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table RR_Fermer (fermerId LONG not null primary key,name VARCHAR(75) null,pravoForma VARCHAR(75) null,inn VARCHAR(75) null,kpp VARCHAR(75) null,ogrn VARCHAR(75) null,rayonRegistration VARCHAR(75) null,rayonPosevPole VARCHAR(75) null,dateRegistration DATE null,archiveStatus BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table RR_Fermer";
    public static final String ORDER_BY_JPQL = " ORDER BY fermer.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RR_Fermer.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.reestrFermerov.model.Fermer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.reestrFermerov.model.Fermer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.reestrFermerov.model.Fermer"),
            true);
    public static long ARCHIVESTATUS_COLUMN_BITMASK = 1L;
    public static long DATEREGISTRATION_COLUMN_BITMASK = 2L;
    public static long FERMERID_COLUMN_BITMASK = 4L;
    public static long INN_COLUMN_BITMASK = 8L;
    public static long NAME_COLUMN_BITMASK = 16L;
    public static long RAYONREGISTRATION_COLUMN_BITMASK = 32L;
    public static final String MAPPING_TABLE_RR_RAYONSPP_FERMERS_NAME = "RR_RayonsPP_Fermers";
    public static final Object[][] MAPPING_TABLE_RR_RAYONSPP_FERMERS_COLUMNS = {
            { "fermerId", Types.BIGINT },
            { "rayonId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_RR_RAYONSPP_FERMERS_SQL_CREATE = "create table RR_RayonsPP_Fermers (fermerId LONG not null,rayonId LONG not null,primary key (fermerId, rayonId))";
    public static final boolean FINDER_CACHE_ENABLED_RR_RAYONSPP_FERMERS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.RR_RayonsPP_Fermers"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.reestrFermerov.model.Fermer"));
    private static ClassLoader _classLoader = Fermer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Fermer.class };
    private long _fermerId;
    private long _originalFermerId;
    private boolean _setOriginalFermerId;
    private String _name;
    private String _originalName;
    private String _pravoForma;
    private String _inn;
    private String _originalInn;
    private String _kpp;
    private String _ogrn;
    private String _rayonRegistration;
    private String _originalRayonRegistration;
    private String _rayonPosevPole;
    private Date _dateRegistration;
    private Date _originalDateRegistration;
    private boolean _archiveStatus;
    private boolean _originalArchiveStatus;
    private boolean _setOriginalArchiveStatus;
    private long _columnBitmask;
    private Fermer _escapedModel;

    public FermerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Fermer toModel(FermerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Fermer model = new FermerImpl();

        model.setFermerId(soapModel.getFermerId());
        model.setName(soapModel.getName());
        model.setPravoForma(soapModel.getPravoForma());
        model.setInn(soapModel.getInn());
        model.setKpp(soapModel.getKpp());
        model.setOgrn(soapModel.getOgrn());
        model.setRayonRegistration(soapModel.getRayonRegistration());
        model.setRayonPosevPole(soapModel.getRayonPosevPole());
        model.setDateRegistration(soapModel.getDateRegistration());
        model.setArchiveStatus(soapModel.getArchiveStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Fermer> toModels(FermerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Fermer> models = new ArrayList<Fermer>(soapModels.length);

        for (FermerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _fermerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFermerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fermerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Fermer.class;
    }

    @Override
    public String getModelClassName() {
        return Fermer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fermerId", getFermerId());
        attributes.put("name", getName());
        attributes.put("pravoForma", getPravoForma());
        attributes.put("inn", getInn());
        attributes.put("kpp", getKpp());
        attributes.put("ogrn", getOgrn());
        attributes.put("rayonRegistration", getRayonRegistration());
        attributes.put("rayonPosevPole", getRayonPosevPole());
        attributes.put("dateRegistration", getDateRegistration());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long fermerId = (Long) attributes.get("fermerId");

        if (fermerId != null) {
            setFermerId(fermerId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String pravoForma = (String) attributes.get("pravoForma");

        if (pravoForma != null) {
            setPravoForma(pravoForma);
        }

        String inn = (String) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        String kpp = (String) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        String ogrn = (String) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        String rayonRegistration = (String) attributes.get("rayonRegistration");

        if (rayonRegistration != null) {
            setRayonRegistration(rayonRegistration);
        }

        String rayonPosevPole = (String) attributes.get("rayonPosevPole");

        if (rayonPosevPole != null) {
            setRayonPosevPole(rayonPosevPole);
        }

        Date dateRegistration = (Date) attributes.get("dateRegistration");

        if (dateRegistration != null) {
            setDateRegistration(dateRegistration);
        }

        Boolean archiveStatus = (Boolean) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @JSON
    @Override
    public long getFermerId() {
        return _fermerId;
    }

    @Override
    public void setFermerId(long fermerId) {
        _columnBitmask |= FERMERID_COLUMN_BITMASK;

        if (!_setOriginalFermerId) {
            _setOriginalFermerId = true;

            _originalFermerId = _fermerId;
        }

        _fermerId = fermerId;
    }

    public long getOriginalFermerId() {
        return _originalFermerId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getPravoForma() {
        if (_pravoForma == null) {
            return StringPool.BLANK;
        } else {
            return _pravoForma;
        }
    }

    @Override
    public void setPravoForma(String pravoForma) {
        _pravoForma = pravoForma;
    }

    @JSON
    @Override
    public String getInn() {
        if (_inn == null) {
            return StringPool.BLANK;
        } else {
            return _inn;
        }
    }

    @Override
    public void setInn(String inn) {
        _columnBitmask |= INN_COLUMN_BITMASK;

        if (_originalInn == null) {
            _originalInn = _inn;
        }

        _inn = inn;
    }

    public String getOriginalInn() {
        return GetterUtil.getString(_originalInn);
    }

    @JSON
    @Override
    public String getKpp() {
        if (_kpp == null) {
            return StringPool.BLANK;
        } else {
            return _kpp;
        }
    }

    @Override
    public void setKpp(String kpp) {
        _kpp = kpp;
    }

    @JSON
    @Override
    public String getOgrn() {
        if (_ogrn == null) {
            return StringPool.BLANK;
        } else {
            return _ogrn;
        }
    }

    @Override
    public void setOgrn(String ogrn) {
        _ogrn = ogrn;
    }

    @JSON
    @Override
    public String getRayonRegistration() {
        if (_rayonRegistration == null) {
            return StringPool.BLANK;
        } else {
            return _rayonRegistration;
        }
    }

    @Override
    public void setRayonRegistration(String rayonRegistration) {
        _columnBitmask |= RAYONREGISTRATION_COLUMN_BITMASK;

        if (_originalRayonRegistration == null) {
            _originalRayonRegistration = _rayonRegistration;
        }

        _rayonRegistration = rayonRegistration;
    }

    public String getOriginalRayonRegistration() {
        return GetterUtil.getString(_originalRayonRegistration);
    }

    @JSON
    @Override
    public String getRayonPosevPole() {
        if (_rayonPosevPole == null) {
            return StringPool.BLANK;
        } else {
            return _rayonPosevPole;
        }
    }

    @Override
    public void setRayonPosevPole(String rayonPosevPole) {
        _rayonPosevPole = rayonPosevPole;
    }

    @JSON
    @Override
    public Date getDateRegistration() {
        return _dateRegistration;
    }

    @Override
    public void setDateRegistration(Date dateRegistration) {
        _columnBitmask |= DATEREGISTRATION_COLUMN_BITMASK;

        if (_originalDateRegistration == null) {
            _originalDateRegistration = _dateRegistration;
        }

        _dateRegistration = dateRegistration;
    }

    public Date getOriginalDateRegistration() {
        return _originalDateRegistration;
    }

    @JSON
    @Override
    public boolean getArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public boolean isArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public void setArchiveStatus(boolean archiveStatus) {
        _columnBitmask |= ARCHIVESTATUS_COLUMN_BITMASK;

        if (!_setOriginalArchiveStatus) {
            _setOriginalArchiveStatus = true;

            _originalArchiveStatus = _archiveStatus;
        }

        _archiveStatus = archiveStatus;
    }

    public boolean getOriginalArchiveStatus() {
        return _originalArchiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Fermer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Fermer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Fermer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FermerImpl fermerImpl = new FermerImpl();

        fermerImpl.setFermerId(getFermerId());
        fermerImpl.setName(getName());
        fermerImpl.setPravoForma(getPravoForma());
        fermerImpl.setInn(getInn());
        fermerImpl.setKpp(getKpp());
        fermerImpl.setOgrn(getOgrn());
        fermerImpl.setRayonRegistration(getRayonRegistration());
        fermerImpl.setRayonPosevPole(getRayonPosevPole());
        fermerImpl.setDateRegistration(getDateRegistration());
        fermerImpl.setArchiveStatus(getArchiveStatus());

        fermerImpl.resetOriginalValues();

        return fermerImpl;
    }

    @Override
    public int compareTo(Fermer fermer) {
        int value = 0;

        value = getName().compareTo(fermer.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Fermer)) {
            return false;
        }

        Fermer fermer = (Fermer) obj;

        long primaryKey = fermer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FermerModelImpl fermerModelImpl = this;

        fermerModelImpl._originalFermerId = fermerModelImpl._fermerId;

        fermerModelImpl._setOriginalFermerId = false;

        fermerModelImpl._originalName = fermerModelImpl._name;

        fermerModelImpl._originalInn = fermerModelImpl._inn;

        fermerModelImpl._originalRayonRegistration = fermerModelImpl._rayonRegistration;

        fermerModelImpl._originalDateRegistration = fermerModelImpl._dateRegistration;

        fermerModelImpl._originalArchiveStatus = fermerModelImpl._archiveStatus;

        fermerModelImpl._setOriginalArchiveStatus = false;

        fermerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Fermer> toCacheModel() {
        FermerCacheModel fermerCacheModel = new FermerCacheModel();

        fermerCacheModel.fermerId = getFermerId();

        fermerCacheModel.name = getName();

        String name = fermerCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            fermerCacheModel.name = null;
        }

        fermerCacheModel.pravoForma = getPravoForma();

        String pravoForma = fermerCacheModel.pravoForma;

        if ((pravoForma != null) && (pravoForma.length() == 0)) {
            fermerCacheModel.pravoForma = null;
        }

        fermerCacheModel.inn = getInn();

        String inn = fermerCacheModel.inn;

        if ((inn != null) && (inn.length() == 0)) {
            fermerCacheModel.inn = null;
        }

        fermerCacheModel.kpp = getKpp();

        String kpp = fermerCacheModel.kpp;

        if ((kpp != null) && (kpp.length() == 0)) {
            fermerCacheModel.kpp = null;
        }

        fermerCacheModel.ogrn = getOgrn();

        String ogrn = fermerCacheModel.ogrn;

        if ((ogrn != null) && (ogrn.length() == 0)) {
            fermerCacheModel.ogrn = null;
        }

        fermerCacheModel.rayonRegistration = getRayonRegistration();

        String rayonRegistration = fermerCacheModel.rayonRegistration;

        if ((rayonRegistration != null) && (rayonRegistration.length() == 0)) {
            fermerCacheModel.rayonRegistration = null;
        }

        fermerCacheModel.rayonPosevPole = getRayonPosevPole();

        String rayonPosevPole = fermerCacheModel.rayonPosevPole;

        if ((rayonPosevPole != null) && (rayonPosevPole.length() == 0)) {
            fermerCacheModel.rayonPosevPole = null;
        }

        Date dateRegistration = getDateRegistration();

        if (dateRegistration != null) {
            fermerCacheModel.dateRegistration = dateRegistration.getTime();
        } else {
            fermerCacheModel.dateRegistration = Long.MIN_VALUE;
        }

        fermerCacheModel.archiveStatus = getArchiveStatus();

        return fermerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{fermerId=");
        sb.append(getFermerId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", pravoForma=");
        sb.append(getPravoForma());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", rayonRegistration=");
        sb.append(getRayonRegistration());
        sb.append(", rayonPosevPole=");
        sb.append(getRayonPosevPole());
        sb.append(", dateRegistration=");
        sb.append(getDateRegistration());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.liferay.reestrFermerov.model.Fermer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fermerId</column-name><column-value><![CDATA[");
        sb.append(getFermerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pravoForma</column-name><column-value><![CDATA[");
        sb.append(getPravoForma());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rayonRegistration</column-name><column-value><![CDATA[");
        sb.append(getRayonRegistration());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rayonPosevPole</column-name><column-value><![CDATA[");
        sb.append(getRayonPosevPole());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateRegistration</column-name><column-value><![CDATA[");
        sb.append(getDateRegistration());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
